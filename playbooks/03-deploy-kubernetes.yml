---
- name: Initialize Kubernetes cluster
  hosts: k8s_masters
  become: yes
  tasks:
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init

    - name: Initialize Kubernetes master
      command: |
        kubeadm init \
          --pod-network-cidr={{ k8s_pod_network_cidr }} \
          --service-cidr={{ k8s_service_cidr }} \
          --apiserver-advertise-address={{ ansible_host }} \
          --control-plane-endpoint={{ ansible_host }}:6443
      register: kubeadm_init_output
      when: not kubeadm_init.stat.exists

    - name: Create .kube directory for ubuntu user
      file:
        path: /home/ansible/.kube
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ansible/.kube/config
        remote_src: yes
        owner: ansible
        group: ansible
        mode: '0600'

    - name: Install Calico network plugin
      become_user: ansible
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
      args:
        creates: /home/ansible/.kube/calico-installed
      register: calico_install

    - name: Mark Calico as installed
      file:
        path: /home/ansible/.kube/calico-installed
        state: touch
      when: calico_install.changed

    - name: Wait for Calico pods to be ready
      become_user: ansible
      shell: kubectl wait --for=condition=Ready pods -l k8s-app=calico-node -n kube-system --timeout=300s
      retries: 2
      delay: 30
      register: calico_pods
      failed_when: false

    - name: Check Calico node status
      become_user: ansible
      shell: kubectl get pods -n kube-system | grep calico
      register: calico_status

    - name: Display Calico status
      debug:
        msg: "{{ calico_status.stdout_lines }}"

    - name: Wait for nodes to be ready (with longer timeout)
      become_user: ansible
      shell: kubectl wait --for=condition=Ready nodes --all --timeout=600s
      retries: 1
      delay: 0

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
      when: not kubeadm_init.stat.exists or kubeadm_init_output.changed

    - name: Save join command
      set_fact:
        kubeadm_join_command: "{{ join_command.stdout }}"
      when: join_command.stdout is defined

- name: Join worker nodes to cluster
  hosts: k8s_workers
  become: yes
  tasks:
    - name: Check if node is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: Join node to cluster
      command: "{{ hostvars[groups['k8s_masters'][0]]['kubeadm_join_command'] }}"
      when: 
        - not kubelet_conf.stat.exists
        - hostvars[groups['k8s_masters'][0]]['kubeadm_join_command'] is defined

- name: Configure kubectl for all nodes
  hosts: rancher_cluster
  become: yes
  tasks:
    - name: Create .kube directory
      file:
        path: /home/ansible/.kube
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'

    - name: Copy admin.conf from master
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ansible/.kube/config
        remote_src: yes
        owner: ansible
        group: ansible
        mode: '0600'
      delegate_to: "{{ groups['k8s_masters'][0] }}"
      when: inventory_hostname in groups['k8s_workers']

- name: Verify cluster status
  hosts: k8s_masters
  become: yes
  become_user: ansible
  tasks:
    - name: Get cluster nodes
      command: kubectl get nodes
      register: cluster_nodes
      changed_when: false

    - name: Display cluster status
      debug:
        msg: "{{ cluster_nodes.stdout_lines }}"

    - name: Label worker nodes
      command: kubectl label nodes {{ item }} node-role.kubernetes.io/worker=worker --overwrite
      loop: "{{ groups['k8s_workers'] }}"
      changed_when: false