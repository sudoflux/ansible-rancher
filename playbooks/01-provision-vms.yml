---
- name: Provision Rancher VMs on Proxmox
  hosts: localhost
  gather_facts: no
  become: no  # API calls don't need sudo
  vars_files:
    - ../group_vars/vault.yml
  vars:
    vm_template_id: 9000
    vm_storage: ceph-vm-storage
    vm_network_bridge: vmbr0
    vm_network_vlan: 100
    proxmox_api_user: "ansible@pve"  # Use ansible user with PVE auth
    proxmox_api_host: "192.168.100.51"  # Primary Proxmox node for API calls
    proxmox_api_password: "{{ vault_proxmox_api_password }}"
    ansible_ssh_public_key: "{{ lookup('file', '~/.ssh/ansible_ed25519.pub') }}"
    vm_specs:
      rancher1:
        vmid: 201
        cores: 4
        memory: 8192
        disk_size: 100
        node: pve1
        ip: 192.168.100.60
      rancher2:
        vmid: 202
        cores: 4
        memory: 8192
        disk_size: 100
        node: pve2
        ip: 192.168.100.61
      rancher3:
        vmid: 203
        cores: 4
        memory: 8192
        disk_size: 100
        node: pve3
        ip: 192.168.100.62

  tasks:
    - name: Check if VMs already exist
      community.general.proxmox_vm_info:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        vmid: "{{ item.value.vmid }}"
        node: "{{ item.value.node }}"
      loop: "{{ vm_specs | dict2items }}"
      register: vm_check
      failed_when: false

    - name: Clone template to create VMs
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        clone: "ubuntu-cloudinit-nfs"
        newid: "{{ item.value.vmid }}"
        name: "{{ item.key }}"
        node: "pve1"  # Create all VMs on pve1 first since template is there
        storage: "{{ vm_storage }}"
        full: yes
        timeout: 600
      loop: "{{ vm_specs | dict2items }}"
      when: 
        - item.value.vmid not in (vm_check.results | map(attribute='vmid', default=0) | list)

    - name: Configure VM resources and cloud-init
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        vmid: "{{ item.value.vmid }}"
        node: "pve1"  # VMs are on pve1 initially
        cores: "{{ item.value.cores }}"
        memory: "{{ item.value.memory }}"
        balloon: 0
        net:
          net0: "virtio,bridge={{ vm_network_bridge }},tag={{ vm_network_vlan }}"
        ciuser: ubuntu
        cipassword: ubuntu
        sshkeys: "{{ ansible_ssh_public_key }}"
        ipconfig:
          ipconfig0: "ip={{ item.value.ip }}/24,gw=192.168.100.1"
        nameservers: "192.168.100.1"
        update: yes
      loop: "{{ vm_specs | dict2items }}"

    - name: Resize VM disks
      community.general.proxmox_disk:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        vmid: "{{ item.value.vmid }}"
        disk: scsi0
        size: "{{ item.value.disk_size }}G"
        state: resized
      loop: "{{ vm_specs | dict2items }}"

    - name: Start VMs (before migration)
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        vmid: "{{ item.value.vmid }}"
        node: "pve1"
        state: started
      loop: "{{ vm_specs | dict2items }}"

    # Note: All VMs created on pve1 due to template location
    # Migrate manually later if needed: qm migrate <vmid> <target-node>

    - name: Wait for VMs to be reachable
      wait_for:
        host: "{{ item.value.ip }}"
        port: 22
        delay: 30
        timeout: 300
      loop: "{{ vm_specs | dict2items }}"
      delegate_to: localhost